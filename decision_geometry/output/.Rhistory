legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Work/Results/decision_geometry/Data/Theory/NN/angles")
dir <- getwd()
## Angles
angles <- seq(5,180,5)
for (i in angles) {
df <- read.csv(paste0("angles", i, ".csv"))
p_target <- 1 - mean(df$target_reached)
tmp <- as.data.frame(cbind(i, p_target))
if (i == angles[1]) {
data <- tmp
}
else {
data <- rbind(data, tmp)
}
}
names(data) <- c('angle', 'p_target')
head(data)
ggplot(data, aes(x = angle, y = p_target)) + geom_point(size = 3) +
theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 3) +
theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 5) +
theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1) +
theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(Starting angle expression(theta)) + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab('Starting angle (' *theta* ')') + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta* ')')) + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta_0* ')')) + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta*_0 ')')) + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta* '_0)')) + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + ylab('P (reaching the correct target)') +
theme_cus()
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + ylab('P (reaching the correct target)') +
geom_vline(xintercept = 111.88, lty = 2, lwd = 0.5) + theme_cus()
rm(list = ls())
## Load packages
library(reshape2)
library(ggplot2)
library(ggforce)
theme_cus <- function(base_size = 12, base_family = "Helvetica"){
theme_classic(base_size = base_size, base_family = base_family) +
theme(axis.title.x = element_text(size = 6, margin = margin(15,0,0,0)),
axis.title.y = element_text(size = 6, margin = margin(0,15,0,0)),
axis.text = element_text(size = 7),
axis.ticks = element_line(colour = 'black', size = 0.5),
axis.ticks.length = unit(0.2, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.background = element_rect(colour = "black"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Work/Results/decision_geometry/Data/Theory/NN/angles")
dir <- getwd()
## Angles
angles <- seq(5,180,5)
for (i in angles) {
df <- read.csv(paste0("angles", i, ".csv"))
p_target <- 1 - mean(df$target_reached)
tmp <- as.data.frame(cbind(i, p_target))
if (i == angles[1]) {
data <- tmp
}
else {
data <- rbind(data, tmp)
}
}
names(data) <- c('angle', 'p_target')
head(data)
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + ylab('P (reaching the correct target)') +
geom_vline(xintercept = 111.88, lty = 2, lwd = 0.5) + theme_cus()
rm(list = ls())
## Load packages
library(reshape2)
library(ggplot2)
library(ggforce)
theme_cus <- function(base_size = 12, base_family = "Helvetica"){
theme_classic(base_size = base_size, base_family = base_family) +
theme(axis.title.x = element_text(size = 6, margin = margin(15,0,0,0)),
axis.title.y = element_text(size = 6, margin = margin(0,15,0,0)),
axis.text = element_text(size = 7),
axis.ticks = element_line(colour = 'black', size = 0.5),
axis.ticks.length = unit(0.2, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.background = element_rect(colour = "black"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Work/Results/decision_geometry/Data/Theory/NN/angles")
dir <- getwd()
## Angles
angles <- seq(5,180,10)
for (i in angles) {
df <- read.csv(paste0("angles", i, ".csv"))
p_target <- 1 - mean(df$target_reached)
tmp <- as.data.frame(cbind(i, p_target))
if (i == angles[1]) {
data <- tmp
}
else {
data <- rbind(data, tmp)
}
}
names(data) <- c('angle', 'p_target')
head(data)
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + ylab('P (reaching the correct target)') +
geom_vline(xintercept = 111.88, lty = 2, lwd = 0.5) + theme_cus()
rm(list = ls())
## Load packages
library(reshape2)
library(ggplot2)
library(ggforce)
theme_cus <- function(base_size = 12, base_family = "Helvetica"){
theme_classic(base_size = base_size, base_family = base_family) +
theme(axis.title.x = element_text(size = 6, margin = margin(15,0,0,0)),
axis.title.y = element_text(size = 6, margin = margin(0,15,0,0)),
axis.text = element_text(size = 7),
axis.ticks = element_line(colour = 'black', size = 0.5),
axis.ticks.length = unit(0.2, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.background = element_rect(colour = "black"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Work/Results/decision_geometry/Data/Theory/NN/angles")
dir <- getwd()
## Angles
angles <- seq(10,180,10)
for (i in angles) {
df <- read.csv(paste0("angles", i, ".csv"))
p_target <- 1 - mean(df$target_reached)
tmp <- as.data.frame(cbind(i, p_target))
if (i == angles[1]) {
data <- tmp
}
else {
data <- rbind(data, tmp)
}
}
names(data) <- c('angle', 'p_target')
head(data)
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + ylab('P (reaching the correct target)') +
geom_vline(xintercept = 111.88, lty = 2, lwd = 0.5) + theme_cus()
rm(list = ls())
## Load packages
library(reshape2)
library(ggplot2)
library(ggforce)
theme_cus <- function(base_size = 12, base_family = "Helvetica"){
theme_classic(base_size = base_size, base_family = base_family) +
theme(axis.title.x = element_text(size = 6, margin = margin(15,0,0,0)),
axis.title.y = element_text(size = 6, margin = margin(0,15,0,0)),
axis.text = element_text(size = 7),
axis.ticks = element_line(colour = 'black', size = 0.5),
axis.ticks.length = unit(0.2, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.background = element_rect(colour = "black"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Work/Results/decision_geometry/Data/Theory/NN/angles")
dir <- getwd()
## Angles
angles <- seq(10,180,10)
for (i in angles) {
df <- read.csv(paste0("angles", i, ".csv"))
p_target <- 1 - mean(df$target_reached)
tmp <- as.data.frame(cbind(i, p_target))
if (i == angles[1]) {
data <- tmp
}
else {
data <- rbind(data, tmp)
}
}
names(data) <- c('angle', 'p_target')
head(data)
ggplot(data, aes(x = angle, y = p_target)) + geom_line(size = 1, lineend = 'round') +
xlab(bquote('Starting angle (' *theta[0]* ')')) + ylab('P (reaching the correct target)') +
geom_vline(xintercept = 111.88, lty = 2, lwd = 0.5) + theme_cus()
ggsave(paste0('/Users/vivekhsridhar/Documents/Work/Ideas/Decision\ Geometry/Figures/starting_angle.pdf'),
width = 1.85, height = 1, units = 'in', dpi = 600)
ggsave(paste0('/Users/vivekhsridhar/Documents/Work/Ideas/Decision\ Geometry/Figures/starting_angle.pdf'),
width = 2, height = 2, units = 'in', dpi = 600)
ggsave(paste0('/Users/vivekhsridhar/Documents/Work/Ideas/Decision\ Geometry/Figures/starting_angle.pdf'),
width = 3, height = 2, units = 'in', dpi = 600)
rm(list = ls())
## Load packages
library(reshape2)
library(ggplot2)
library(ggforce)
theme_cus <- function(base_size = 12, base_family = "Helvetica"){
theme_classic(base_size = base_size, base_family = base_family) +
theme(axis.title.x = element_text(size = 15, margin = margin(15,0,0,0)),
axis.title.y = element_text(size = 15, margin = margin(0,15,0,0)),
axis.text = element_text(size = 12),
axis.ticks.length = unit(0.3, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right",
legend.background = element_rect(colour = "black"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Code/decision_geometry/decision_geometry/output/")
dir <- getwd()
## Load data
df <- read.csv("geometry.csv")
head(df)
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradientn(low = 'black', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradient2(low = 'black', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradient(low = 'black', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradient(low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradient2(low = 'black', mid = 'red', high = 'yellow') + theme_cus()
rm(list = ls())
## Load packages
library(reshape2)
library(ggplot2)
library(ggforce)
theme_cus <- function(base_size = 12, base_family = "Helvetica"){
theme_classic(base_size = base_size, base_family = base_family) +
theme(axis.title.x = element_text(size = 15, margin = margin(15,0,0,0)),
axis.title.y = element_text(size = 15, margin = margin(0,15,0,0)),
axis.text = element_text(size = 12),
axis.ticks.length = unit(0.3, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right",
legend.background = element_rect(colour = "black"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
}
## Set working directory
setwd("/Users/vivekhsridhar/Documents/Code/decision_geometry/decision_geometry/output/")
dir <- getwd()
## Load data
df <- read.csv("geometry.csv")
head(df)
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradient2(low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.01) +
scale_color_gradient2(low = 'black', mid = 'black', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(low = 'black', mid = 'black', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(low = 'black', mid = 'black', high = 'red') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient(low = 'black', mid = 'orange', high = 'red') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient(low = 'black' high = 'red') + theme_cus()
## Load data
df <- read.csv("geometry.csv")
head(df)
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(low = 'black', mid = 'black', high = 'red') + theme_cus()
## Load data
df <- read.csv("geometry.csv")
head(df)
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(low = 'black', mid = 'black', high = 'red') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(low = 'black', high = 'red') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient(midpoint = mid, low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradientn(midpoint = mid, low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(midpoint = mid, low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_color_gradient2(midpoint = mid, low = 'black', mid = 'red', high = 'yellow', space = 'Lab') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_colour_gradient2(midpoint = mid, low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_colour_gradient2(low = 'black', mid = 'red', high = 'yellow') + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_colour_manual(c('black', 'red', 'yellow')) + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_colour_manual(values = c('black', 'red', 'yellow')) + theme_cus()
ggplot(df, aes(x = x, y = y, colour = as.factor(susceptibility))) + geom_point(size = 1, alpha = 0.1) +
scale_colour_manual(values = c('black', 'red', 'yellow')) + theme_cus()
ggplot(df, aes(x = x, y = y, colour = susceptibility)) + geom_point(size = 1, alpha = 0.1) +
scale_colour_manual(values = c('black', 'red', 'yellow')) + theme_cus()
print(i)
for (i in range(0,30)) {
print(i)
}
for (i in range(0:30)) {
print(i)
}
for (i in 0:30) {
print(i)
}
runif(30)
runif(30)
vals <- runif(30)
length(vals < 1/3)
which(vals < 1/3)
abc[1] <- length(which(vals < 1/3))
abc <- c(0,0,0)
abc[1] <- length(which(vals < 1/3))
abc[3] <- length(which(vals > 2/3))
abc[2] <- 30 - abc[1] - abc[3]
abc[1] <- length(which(vals < 1/3)) / 30
abc[3] <- length(which(vals > 2/3)) / 30
abc[2] <- 1 - abc[1] - abc[3]
abc
length(which(vals < 1/3))
vals <- runif(30)
abc[1] <- length(which(vals < 1/3)) / 30
abc[3] <- length(which(vals > 2/3)) / 30
abc[2] <- 1 - abc[1] - abc[3]
vals <- runif(30)
abc[1] <- length(which(vals < 1/3)) / 30
abc[3] <- length(which(vals > 2/3)) / 30
abc[2] <- 1 - abc[1] - abc[3]
vals <- runif(30)
abc[1] <- length(which(vals < 1/3)) / 30
abc[3] <- length(which(vals >= 2/3)) / 30
abc[2] <- 1 - abc[1] - abc[3]
abc[1] <- length(which(vals < 1/3)) / 30
abc[3] <- length(which(vals >= 2/3)) / 30
abc[2] <- 1 - abc[1] - abc[3]
vals <- runif(30)
abc[1] <- length(which(vals < 1/3)) / 30
abc[3] <- length(which(vals >= 2/3)) / 30
abc[2] <- 1 - abc[1] - abc[3]
n = 30
abc <- c(0,0,0)
vals <- runif(n)
abc[1] <- length(which(vals < 1/3)) / n
abc[3] <- length(which(vals >= 2/3)) / n
abc[2] <- 1 - abc[1] - abc[3]
vals <- runif(n)
abc[1] <- length(which(vals < 1/3)) / n
abc[3] <- length(which(vals >= 2/3)) / n
abc[2] <- 1 - abc[1] - abc[3]
n = 1000
abc <- c(0,0,0)
vals <- runif(n)
abc[1] <- length(which(vals < 1/3)) / n
abc[3] <- length(which(vals >= 2/3)) / n
abc[2] <- 1 - abc[1] - abc[3]
vals <- runif(n)
abc[1] <- length(which(vals < 1/3)) / n
abc[3] <- length(which(vals >= 2/3)) / n
abc[2] <- 1 - abc[1] - abc[3]
n = 30
abc <- c(0,0,0)
vals <- runif(n)
abc[1] <- length(which(vals < 1/3)) / n
abc[3] <- length(which(vals >= 2/3)) / n
abc[2] <- 1 - abc[1] - abc[3]
ps <- vector()
ps.append(length(which(vals < 1/3)) / n)
append(ps, length(which(vals < 1/3)) / n)
ps <- append(ps, length(which(vals < 1/3)) / n)
ps <- append(ps, length(which(vals < 1/3)) / n)
n = 30
ps <- vector()
for (i in 0:10) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps)
vline(0.33)
?vline
hist(ps, bins=30)
hist(ps, bins=30)
hist(ps, breaks=30)
for (i in 0:100) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=30)
for (i in 0:1000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=30)
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=30)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=30)
hist(ps, breaks=10)
hist(ps, breaks=20)
hist(ps, breaks=20)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=20)
hist(ps, breaks=50)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=20)
hist(ps, breaks=25)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) )
}
hist(ps, breaks=25)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps, breaks=25)
ggplot(aes(x = ps)) + geom_histogram()
ggplot(ps, aes(x = ps)) + geom_histogram()
ggplot(as.data.frame(ps), aes(x = ps)) + geom_histogram()
ggplot(as.data.frame(ps), aes(x = ps)) + geom_density()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) )
}
ggplot(as.data.frame(ps), aes(x = ps)) + geom_density()
ggplot(as.data.frame(ps), aes(x = ps)) + geom_histogram()
hist(ps)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps)
ggplot(as.data.frame(ps), aes(x = ps)) + geom_histogram()
ggplot(as.data.frame(ps), aes(x = ps)) + geom_density()
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) / n)
}
hist(ps)
n = 30
ps <- vector()
for (i in 0:10000) {
vals <- runif(n)
ps <- append(ps, length(which(vals < 1/3)) )
}
hist(ps)
ggplot(as.data.frame(ps), aes(x = ps)) + geom_density()
